<?xml version="1.0"?>
<project basedir="." default="deploy">
  <!-- 项目的配置信息 -->
  <property name="src.dir" value="src" />
  <property name="test.dir" value="test" />
  <property name="tools.dir" value="externs/sdcfe/tools" />
  <property name="build.dir" value="./target/output" />
  <property name="externs.dir" value="${src.dir}/externs" />
  <property name="externs.js" value="${src.dir}/tangram.externs.js" />
  <property name="jquery.externs.js" value="${src.dir}/externs/jquery.externs.js" />
  <property name="pdc.externs.js" value="${externs.dir}/pdc.js" />
  <property name="ant.lib.js" value="${src.dir}/ant.lib.js" />
  <property name="less_include_path" value="src/css/less" />

  <!-- 以下参数是给google-closure-compiler.jar使用的 -->
  <property name="compilation_level" value="BAIDU_OPTIMIZATIONS" />

  <!-- 以下参数是用来获取环境变量的，例如：echo(_("env.USER")); -->
  <property environment="env" />

  <target name="clean" description="delete generated files">
    <delete dir="${build.dir}" />
  </target>

  <target name="less" description="更新所有的*.compiled.css">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var lessc = ("tools/node_modules/less/bin/lessc"),
          include_path = ("src/css/less");

      // ant less -Ddir=src/ad/widget
      var dir = _("dir") || _('src.dir');
      fileset(dir).forEach(function(file){
        if (/\.less$/.test(file)) {
          exec('node', [lessc, '--include-path=' + include_path,
            file, file.replace(".less", ".compiled.css")]);
        }
      });
    ]]>
    </script>
  </target>

  <target name="ad.rewrite" description="ad.deploy之后，对生成的代码再次重写，保证符合检索端的约定来生成RCV地址">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var name = _("name");
      if (!name) {
        fail("Please set -Dname");
      }

      var dir = getPath(_("build.dir") + '/' + name);
      if (!fileExists(dir)) {
        fail("No such directory, please first run `ant ad.deploy -Dname=" + name + "`");
      }

      var only_dump_links = 1;
      if ('0' == _('only_dump_links')) {
          only_dump_links = 0;
      }

      var link_id = parseInt(_("link_id"), 10) || '0';
      fileset(dir).forEach(function(file){
        var fn = basename(file);
        if (fn.match(/\.js$/) && (fn.indexOf(name + ".app-") == 0)) {
          var args = [
            getPath(_('tools.dir') + '/bin/Fer.py'),
            '--rewrite_deploy_code',
            '--link_id ' + link_id,
            (only_dump_links ? '--only_dump_links' : ''),
            '--name ' + file
          ];
          exec(PYTHON(), args);
        }
      });
    ]]>
    </script>
  </target>

  <target name="style.deploy" description="build一个广告样式">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var name = _("name");
      var dir = _("dir");
      if (!name || !dir) {
        fail("please set -Dname and -Ddir");
      }

      var gen_material = _("gen_material");

      _('build.dir', _('src.dir') + '/ad/style_impl/' + name);
      if (!gen_material || gen_material != '1') {
          build_style_entry(name, dir, 'output');
      } else {
          build_ad_entry(name, dir, 'material_output');
      }
    ]]>
    </script>
  </target>

  <target name="ad.deploy" description="build一个广告物料的entry_point">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var name = _("name");
      if (!name) {
        fail("please set -Dname");
      }

      var dir = _("dir") || 'src/ad/impl';
      var output_dir = _("output_dir") || name;
      build_ad_entry(name, dir, output_dir);

      var stage = _("stage");
      if (stage == '2' || stage == '3') {
        var dir = getPath(_("build.dir") + '/' + name);
        if (!fileExists(dir)) {
          fail("No such directory, please first run `ant ad.deploy -Dname=" + name + "`");
        }


        var only_dump_links = ('2' == stage) ? 0 : 1;
        var async = ('1' == _('async')) ? 1 : 0;

        var link_id = parseInt(_("link_id"), 10) || '0';
        fileset(dir).forEach(function(file){
          var fn = basename(file);
          if (fn.match(/\.js$/) && (fn.indexOf(name + ".app-") == 0)) {
            var args = [
              getPath(_('tools.dir') + '/bin/Fer.py'),
              '--rewrite_deploy_code',
              '--link_id ' + link_id,
              '--stage ' + stage,
              '--name ' + file,
              (async ? '--async ' : '')
            ];
            exec(PYTHON(), args);
          }
        });
      }

    ]]>
    </script>
  </target>

  <target name="ad.plugin.deploy" description="build一个插件的entry_point">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var ns = _("ns");
      if (!ns) {
        fail("please set -Dns");
      }

      var name = (ns + '').replace(/\./g, '_').toLowerCase();
      var output_dir = _("output_dir") || name;
      var content = [
        '<!doctype html>\n',
        '<html>\n<head>\n<meta charset="utf-8" />\n</head>\n<body>\n',
            '<s' + 'cript type="text/javascript">goog.require("' + ns + '");<' + '/script>',
        '</body>\n</html>'
      ].join('');
      var dir = tempdir();
      var entry = dir + '/' + name + '.app.html';
      writeFile(entry, content);
      build_ad_entry(name, dir, output_dir, 'src/ad/plugin/plugin.cfg');
      // rewrite
      var odir = getPath(_("build.dir") + '/' + output_dir);
      fileset(odir).forEach(function(file){
        var fn = basename(file);
        if (fn.match(/\.js$/) && (fn.indexOf(name + ".app-") == 0)) {
            var content = readFile(file);
            var newCont = content.replace(/PLUGIN_KEEP\(['"]([^)]+)['"]\)/g, '$1');
            writeFile(file, newCont);
        }
      });
      rmdir(dir);
    ]]>
    </script>
  </target>

  <target name="ad.amd.deploy" description="build一个对象为amd模块">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var ns = _("ns");
      if (!ns) {
        fail("please set -Dns");
      }

      var name = (ns + '').replace(/\./g, '_').toLowerCase();
      var output_dir = name;
      var content = [
        '<!doctype html>\n',
        '<html>\n<head>\n<meta charset="utf-8" />\n</head>\n<body>\n',
            '<s' + 'cript type="text/javascript">\n',
                'goog.require("' + ns + '");\n',
            '<' + '/script>\n',
        '</body>\n</html>'
      ].join('');

      var dir = tempdir();
      var entry = dir + '/' + name + '.app.html';
      writeFile(entry, content);
      build_ad_entry(name, dir, output_dir, 'src/ad/amd.build.cfg');
      var odir = getPath(_("build.dir") + '/' + output_dir);
      fileset(odir).forEach(function(file){
        var fn = basename(file);
        if (fn.match(/\.js$/) && (fn.indexOf(name + ".app-") == 0)) {
            var arr = (ns + '').split('.');
            if (arr[0] == 'ad') {
                arr.shift();
            }
            arr.push(
                arr.pop().replace(/(\B[A-Z])/g, function($1) {
                    return '_' + $1;
                }).toLowerCase()
            );
            var path = getPath(_("build.dir") + '/exported/' + arr.join('/') + '.js');
            var content = readFile(file);
            writeFile(path, content);
            logger.debug(' It\'s saved in: [ ' + path.replace(/^\.\//g, '') + ' ]');
        }
      });

      rmdir(dir);
      rmdir(odir);
    ]]>
    </script>
  </target>

  <target name="echo_env" description="打印环境变量">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      echo_env();
    ]]>
    </script>
  </target>

  <target name="test" description="测试">
    <script language="javascript" src="${ant.lib.js}" manager="javax">
    <![CDATA[
      // fail("XXXXXXXXXXXXXXXXXXXX");
      // importClass(org.apache.tools.ant.ExitStatusException);
      // java.lang.System.exit(10);
      // throw new ExitStatusException("X", 10);
      // throw "XXXXXXXXXXXXXXXXXXXX";
      // gen_app_deps();
      echo(self.getOwningTarget());
      _("X_NAME", "leeight");
      echo(_("X_NAME"));
      var a = echoproperties();
      for(var i = 0; i < a.length; i ++) {
        if (a[i].match(/^([a-zA-Z_\.]+)_URL=/)) {
          var name = a[i].split('=')[0];
          echo(name);
        } else if (a[i].match(/^FLAGS_enable/)) {
          var name = a[i].split('=')[0];
          echo(name);
        }
      }
      echo(_("HELLO"));
      var list = [1,2,3];
      list.forEach(function(){
        logger.debug(arguments[0]);
      });
    ]]>
    </script>
  </target>

  <target name="deps" description="generated deps.js and app.deps.js">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      exec(PYTHON(), [
        getPath(_('tools.dir') + '/bin/Fer.py'),
        '--gen_deps',
        '-p src',
        '--output_file ' + getPath('src/deps.js')
      ]);
      exec('node', [
        getPath('src/ad/gen_deps_map.js'),
        getPath('src/deps.js'),
        '--output=' + getPath('src/deps.json')
      ]);
      exec('node', [
        getPath('build/task/gen_app_deps.js')
      ]);
    ]]>
    </script>
  </target>

  <target name="pack" depends="deps" description="generated widgets.zip">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      exec('sh', [
        getPath('src/ad/pack.sh')
      ]);
    ]]>
    </script>
  </target>

  <target name="loader" description="build loader and upload it to bcs.">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var ns = _('ns');
      if (!ns) {
         fail('please set -Dns');
      }

      var onlineName = _('online_name');
      if (!onlineName) {
        fail('please set -Donline_name');
      }

      var isDev = _('dev');
      if (!isDev && (prompt('是否真的要上线loader', 'y,n', 'n') == 'n')) {
        fail();
      }

      build(ns, onlineName);

      /**
       * 构建loader，并提交
       * @param {string} ns 例如'ad.plugin.imageplus.baseLoaderEntry'
       */
      function build(ns, onlineName) {
        var name = (ns + '').replace(/\./g, '_').toLowerCase();
        var output_dir = _("output_dir") || name;
        var content = [
          '<!doctype html>\n',
          '<html>\n<head>\n<meta charset="utf-8" />\n</head>\n<body>\n',
              '<s' + 'cript type="text/javascript">goog.require("' + ns + '");<' + '/script>',
          '</body>\n</html>'
        ].join('');
        var dir = tempdir();
        var entry = dir + '/' + name + '.app.html';
        writeFile(entry, content);
        build_ad_entry(name, dir, output_dir, 'src/ad/plugin/plugin.cfg');
        // rewrite
        var odir = getPath(_("build.dir") + '/' + output_dir);
        fileset(odir).forEach(function(file){
          var fn = basename(file);
          if (fn.match(/\.js$/) && (fn.indexOf(name + ".app-") == 0)) {
              var content = readFile(file);
              var newCont = content.replace(/PLUGIN_KEEP\(['"]([^)]+)['"]\)/g, '$1');
              newCont += '\n\/\/' + new Date().toString();
              writeFile(file, newCont);
              exec('edp', [
                'bcs',
                file,
                'bs://public03/' + onlineName + (_('dev') ? '-dev' : '') + '.js'
              ]);
          }
        });
        rmdir(dir);
      }
    ]]>
    </script>
  </target>

  <target name="imageplus.render" description="generated imageplus render and upload it.">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var name = _('name');
      var bcsName = _('bcsname');
      var dir = _('dir') || 'src/ad/impl';
      var buildOnly = _('buildOnly') || false;

      var isDev = _('dev');
      if (!isDev && (prompt('是否真的要上线render', 'y,n', 'n') == 'n')) {
        fail();
      }

      if (!name) {
        fileset(dir + '/imageplus').forEach(function (file) {
          var r;
          if (r = file.match(/imageplus\/((\w+\/)?[a-z0-9_]+)\.app\.html$/)) {
            build(r[1], buildOnly);
          }
        });
      } else {
        build(name, buildOnly);
      }

      /**
       * 构建render，并提交
       * @param {string} name render的名字，例如'qiang'、'ask'、'video'等等
       * @param {boolean} buildOnly 如果为true，那么只build代码，不上传到bcs.
       */
      function build(name, buildOnly) {
        var trueName = name;
        name = 'imageplus/' + name;

        var output_dir = _('output_dir') || name;
        build_ad_entry(name, dir, output_dir);

        if (buildOnly) {
          return;
        }

        // upload
        fileset(_('build.dir') + '/' + output_dir).forEach(function(file){
          if (file.match(/app\-[0-9a-zA-Z]+\.js/)) {
              var content = readFile(file);
              var newCont = content + '\n\/\/' + new Date().toString();
              writeFile(file, newCont);
              exec('edp', [
                'bcs',
                file,
                'bs://public03/imageplus/' + (bcsName || trueName) + (_('dev') ? '-dev' : '') + '.app.js'
              ]);
          }
        });
      }
    ]]>
    </script>
  </target>

  <target name="native.render" description="generated native render and upload it.">
    <script language="javascript" src="${ant.lib.js}">
    <![CDATA[
      var name = _('name');
      var dir = _('dir') || 'src/ad/impl';
      if (!name) {
        fileset(dir + '/zhidao_native').forEach(function (file) {
          var r;
          if (r = file.match(/([a-z0-9_]+)\.app\.html$/)) {
            build(r[1]);
          }
        });
      } else {
        build(name);
      }

      /**
       * 构建render，并提交
       * @param {string} name render的名字，例如'qiang'、'ask'、'video'等等
       */
      function build(name) {
        var trueName = name;
        name = 'zhidao_native/' + name;

        var output_dir = _('output_dir') || name;
        build_ad_entry(name, dir, output_dir);

        // upload
        fileset(_('build.dir') + '/' + output_dir).forEach(function(file){
          if (file.match(/app\-[0-9a-zA-Z]+\.js/)) {
              exec('edp', [
                'bcs',
                file,
                'bs://public03/zhidao_native/' + trueName + (_('dev') ? '-dev' : '') + '.app.js'
              ]);
          }
        });
      }
    ]]>
    </script>
  </target>
</project>
